library(Lock5Data)
data(CollegeScores)
CollegeData = CollegeScores[complete.cases(CollegeScores),]
rm(CollegeScores)
CollegeData = CollegeData[
CollegeData$Region != names(summary(CollegeData$Region)
[summary(CollegeData$Region) == 1]),
]
CollegeData$Locale = factor(CollegeData$Locale)
CollegeData$Region = factor(CollegeData$Region)
CollegeData$Main = factor(CollegeData$Main,
labels = c("Branch campus", "Main Campus"))
CollegeData$MainDegree = factor(CollegeData$MainDegree, levels = c(0:4),
labels=c("Not Classified", "Certificate",
"Associate", "Bachelors", "Only Grad"))
CollegeData$HighDegree = factor(CollegeData$HighDegree, levels = c(0:4),
labels=c("No Degress", "Certificate",
"Associate", "Bachelors",
"Graduate"))
CollegeData$MainDegree = factor(CollegeData$MainDegree)
CollegeData$HighDegree = factor(CollegeData$HighDegree)
names(CollegeData)[names(CollegeData) == "Control"] = "Type"
attach(CollegeData)
bucknell = Name == "Bucknell University"
ggplot(CollegeData, aes(x = CompRate, y = MedIncome, color = bucknell,
shape = Locale, size = bucknell)) +
geom_point() +
scale_color_manual(values = c("#003865", "#E87722")) +
scale_shape_manual(values = c(3, 4, 0, 17)) +
scale_y_continuous(labels = function(x) paste0(x, "k")) +
scale_x_continuous(labels = function(x) paste0(x, "%")) +
labs(color = "Bucknell", size = "Bucknell") +
xlab("Graduation Rate") +
ylab("Median Income (USD)") +
ggtitle("Bucknell: A Wealthy Town School with a High Graduation Rate")
detach(CollegeData)
install.packages("htmltools")
install.packages("htmltools")
?NutritionStudy
library(Lock5Data)
?NutritionStudy
?StudentSurvey
knitr::opts_chunk$set(echo = FALSE)
library(ggridges)
StartUp = read.csv("data/startup_growth_investment_data.csv")
ggplot(StartUp, aes(x = Investment.Amount..USD., y = Industry,
fill = after_stat(x))) +
geom_density_ridges_gradient(scale = 2, rel_min_height = 0.05,
quantile_lines = TRUE) +
scale_fill_viridis_c() +
scale_x_continuous(labels = function(x) paste0(x/1e9, "M"))
knitr::opts_chunk$set(echo = FALSE)
ggplot(merged_race_results, aes(x = grid, y = positionOrder, fill = status, group = status)) +
stat_density_2d(geom="polygon", color="white",
alpha = 0.25)
knitr::opts_chunk$set(echo = FALSE)
library(ggplot2)
library(ggdensity)
library(ggridges)
library(plotly)
library(tidyr)
library(htmltools)
race_results = read.csv("data/Race_Results.csv")
drivers = read.csv("data/Driver_Details.csv")
race_info = read.csv("data/Race_Schedule.csv")
world_champs = read.csv("data/world_champs.csv")
merged_race_results = merge(x = race_results, y = drivers, by = "driverId")
merged_race_results$fullname = paste(merged$forename, merged$surname)
world_champs_races = merged[(merged$surname %in% world_champs$Last) & (merged$forename %in% world_champs$First), ]
world_champs_races = merge(world_champs_races, race_info, by="raceId")
world_champs_races$win = ifelse(world_champs_races$positionOrder == 1, 1, 0)
world_champs_races$win = as.numeric(world_champs_races$win)
world_champs_wins = aggregate(world_champs_races[,"win"], world_champs_races[,c("fullname", "surname", "driverId")], "sum")
num_races = function(row) {
driver <- row[1]                    # first element is the surname
sum(!duplicated(
world_champs_races$raceId[world_champs_races$fullname == driver]))
}
world_champs_wins$num.races = apply(world_champs_wins, 1, num_races)
world_champs_wins$win.prop = world_champs_wins$x / world_champs_wins$num.races
big_data = merge(merged, race_info, by="raceId")
big_data = merge(big_data, driver_standings, by=c("driverId", "raceId"))
big_data$rank = replace_na(as.numeric(big_data$rank), 20)
big_data$win = ifelse(big_data$positionOrder == 1, 1, 0)
avg_big_data_driver = aggregate(big_data[,c("grid", "positionOrder", "win")], big_data[c("fullname", "driverId", "surname", "forename")], "mean")
driver_status = function(row) {
driver = row["fullname"]
if(driver %in% c("Max Verstappen", "Lewis Hamilton", "Sebastian Vettel", "Michael Schumacher", "Ayrton Senna", "Juan Fangio")) {
return("great")
} else if(driver %in% unique(world_champs_races$fullname)) {
return("champ")
} else {
return("driver")
}
}
avg_big_data_driver$status = apply(avg_big_data_driver, 1, driver_status)
merged_race_results$status = apply(merged_race_results, 1, driver_status)
all_time_greats = merged[(merged$fullname %in% c("Max Verstappen", "Lewis Hamilton", "Sebastian Vettel", "Michael Schumacher", "Ayrton Senna", "Juan Fangio")), ]
all_time_greats = merge(all_time_greats, race_info, by="raceId")
all_time_greats$win = ifelse(all_time_greats$positionOrder == 1, 1, 0)
h1("What Makes A Champion")
h3("Introduction")
p("Formula One is a cut throat sport where every millisecond counts. The difference of one second
can mean the difference between starting on the front of the grid and dead last. However there are some
drivers who can rise above the rest and find every last millisecond and get every last drop of performance
out of the car no matter what. This is what makes a world champion in formula one. Then there are drivers who
can do this year after year and this is what makes a driver a legend. In this article we are going to explore
the stats that seperate regular drivers from world champions, and champions from legends.")
ggplot(merged_race_results, aes(x = grid, y = positionOrder, fill = status, group = status)) +
stat_density_2d(geom="polygon", color="white",
alpha = 0.25)
# scale_fill_distiller(palette = "BuPu")
merged_race_results
merged_race_results[merged_race_results$status == "driver",]
ggplot(merged_race_results, aes(x = grid, y = positionOrder, fill = status, group = status)) +
stat_density_2d_filled(geom="polygon", color="white",
alpha = 0.25)
# scale_fill_distiller(palette = "BuPu")
ggplot(merged_race_results, aes(x = grid, y = positionOrder, fill = status)) +
stat_density_2d_filled(geom="polygon", color="white",
alpha = 0.25)
# scale_fill_distiller(palette = "BuPu")
ggplot(merged_race_results, aes(x = grid, y = positionOrder, fill = status)) +
geom_density_2d_filled(geom="polygon", color="white",
alpha = 0.25)
# scale_fill_distiller(palette = "BuPu")
ggplot(merged_race_results, aes(x = grid, y = positionOrder, fill = status)) +
geom_density_2d_filled(contour = FALSE)
# scale_fill_distiller(palette = "BuPu")
ggplot(merged_race_results, aes(x = grid, y = positionOrder, fill = status)) +
geom_density_2d_filled(contour = FALSE, alpha = 0.1)
# scale_fill_distiller(palette = "BuPu")
ggplot(merged_race_results, aes(x = grid, y = positionOrder, fill = status)) +
geom_density_2d_filled(alpha = 0.1)
# scale_fill_distiller(palette = "BuPu")
ggplot(merged_race_results, aes(x = grid, y = positionOrder, group = status)) +
geom_density_2d_filled(alpha = 0.1)
# scale_fill_distiller(palette = "BuPu")
ggplot(merged_race_results, aes(x = grid, y = positionOrder, fill = status, group = status)) +
geom_density_2d_filled(alpha = 0.1)
# scale_fill_distiller(palette = "BuPu")
ggplot(merged_race_results, aes(x = grid, y = positionOrder, fill = status, group = status)) +
geom_density_2d_filled(alpha = 0.1) +
scale_fill_brewer(palette = "BuPu")
ggplot(merged_race_results, aes(x = grid, y = positionOrder, fill = status)) +
geom_density_2d_filled(alpha = 0.1) +f
ggplot(merged_race_results, aes(x = grid, y = positionOrder, fill = status)) +
geom_density_2d_filled(alpha = 0.1) +
scale_fill_brewer(palette = "BuPu")
ggplot(merged_race_results, aes(x = grid, y = positionOrder, fill = status, color = status)) +
geom_density_2d_filled(alpha = 0.1)
ggplot(merged_race_results, aes(x = grid, y = positionOrder, color = status)) +
geom_density_2d_filled(alpha = 0.1)
plot = ggplot(merged_race_results, aes(x = grid, y = positionOrder, color = status)) +
geom_density_2d_filled(alpha = 0.1)
ggplotly(plot)
plot = ggplot(merged_race_results, aes(x = grid, y = positionOrder, color = status)) +
geom_density_2d_filled(alpha = 0.1)
ggplot(merged_race_results, aes(x = grid, y = positionOrder, color = status)) +
geom_density_2d_filled(alpha = 0.1)
ggplot(merged_race_results, aes(x = grid, y = positionOrder, color = status)) +
geom_density_2d_filled(alpha = 0.1, bins=9)
ggplot(merged_race_results, aes(x = grid, y = positionOrder, color = status)) +
geom_density_2d_filled(alpha = 0.1, bins=12)
ggplot(merged_race_results, aes(x = grid, y = positionOrder, color = status)) +
geom_density_2d_filled(alpha = 0.1, bins=15)
ggplot(merged_race_results, aes(x = grid, y = positionOrder, color = status)) +
geom_density_2d_filled(alpha = 0.1, bins=10)
ggplot(merged_race_results, aes(x = grid, y = positionOrder, color = status)) +
geom_density_2d_filled(alpha = 0.1, bins= 12)
ggplot(merged_race_results, aes(x = grid, y = positionOrder, color = status)) +
geom_hex(alpha = 0.1)
ggplot(merged_race_results, aes(x = grid, y = positionOrder, fill = status)) +
geom_hex(alpha = 0.1)
ggplot(merged_race_results, aes(x = grid, y = positionOrder, fill = status)) +
geom_hex(alpha = 0.1, bins = 20)
ggplot(merged_race_results, aes(x = grid, y = positionOrder, fill = status)) +
geom_hex(alpha = 0.1, bins = 25)
ggplot(merged_race_results, aes(x = grid, y = positionOrder, fill = status, color = status)) +
geom_hex(alpha = 0.1, bins = 25)
ggplot(merged_race_results, aes(x = grid, y = positionOrder, fill = status)) +
geom_hex(alpha = 0.1, bins = 25)
plot = ggplot(merged_race_results, aes(x = grid, y = positionOrder, fill = status)) +
geom_hex(alpha = 0.1, bins = 25)
ggplotly(plot)
plot = ggplot(merged_race_results, aes(x = grid, y = positionOrder, fill = status)) +
geom_hex(alpha = 0.3, bins = 25)
ggplotly(plot)
plot = ggplot(merged_race_results, aes(x = grid, y = positionOrder, fill = status)) +
geom_hex(alpha = 0.3, bins = 30)
ggplotly(plot)
plot = ggplot(merged_race_results, aes(x = grid, y = positionOrder, fill = status)) +
geom_hex(alpha = 0.3, bins = 30) +
scale_fill_viridis_c( )
ggplotly(plot)
plot = ggplot(merged_race_results, aes(x = grid, y = positionOrder, fill = status)) +
geom_hex(alpha = 0.3, bins = 30)
ggplotly(plot)
plot = ggplot(merged_race_results, aes(x = grid, y = positionOrder, fill = status)) +
geom_point(alpha = 0.3, bins = 30)
ggplotly(plot)
knitr::opts_chunk$set(echo = FALSE)
library(ggplot2)
library(ggdensity)
library(ggridges)
library(plotly)
library(tidyr)
library(htmltools)
race_results = read.csv("data/Race_Results.csv")
drivers = read.csv("data/Driver_Details.csv")
race_info = read.csv("data/Race_Schedule.csv")
world_champs = read.csv("data/world_champs.csv")
merged_race_results = merge(x = race_results, y = drivers, by = "driverId")
merged_race_results$fullname = paste(merged$forename, merged$surname)
world_champs_races = merged[(merged$surname %in% world_champs$Last) & (merged$forename %in% world_champs$First), ]
world_champs_races = merge(world_champs_races, race_info, by="raceId")
world_champs_races$win = ifelse(world_champs_races$positionOrder == 1, 1, 0)
world_champs_races$win = as.numeric(world_champs_races$win)
world_champs_wins = aggregate(world_champs_races[,"win"], world_champs_races[,c("fullname", "surname", "driverId")], "sum")
num_races = function(row) {
driver <- row[1]                    # first element is the surname
sum(!duplicated(
world_champs_races$raceId[world_champs_races$fullname == driver]))
}
world_champs_wins$num.races = apply(world_champs_wins, 1, num_races)
world_champs_wins$win.prop = world_champs_wins$x / world_champs_wins$num.races
big_data = merge(merged, race_info, by="raceId")
big_data = merge(big_data, driver_standings, by=c("driverId", "raceId"))
big_data$rank = replace_na(as.numeric(big_data$rank), 20)
big_data$win = ifelse(big_data$positionOrder == 1, 1, 0)
avg_big_data_driver = aggregate(big_data[,c("grid", "positionOrder", "win")], big_data[c("fullname", "driverId", "surname", "forename")], "mean")
driver_status = function(row) {
driver = row["fullname"]
if(driver %in% c("Max Verstappen", "Lewis Hamilton", "Sebastian Vettel", "Michael Schumacher", "Ayrton Senna", "Juan Fangio")) {
return("great")
} else if(driver %in% unique(world_champs_races$fullname)) {
return("champ")
} else {
return("driver")
}
}
avg_big_data_driver$status = apply(avg_big_data_driver, 1, driver_status)
merged_race_results$status = apply(merged_race_results, 1, driver_status)
all_time_greats = merged[(merged$fullname %in% c("Max Verstappen", "Lewis Hamilton", "Sebastian Vettel", "Michael Schumacher", "Ayrton Senna", "Juan Fangio")), ]
all_time_greats = merge(all_time_greats, race_info, by="raceId")
all_time_greats$win = ifelse(all_time_greats$positionOrder == 1, 1, 0)
driver_standings = read.csv("data/Driver_Rankings.csv")
# champions per season
champions_per_year <- merge(
merge(driver_standings, race_info[, c("raceId", "year")]),
drivers[, c("driverId", "surname", "forename")]
)
champions_per_year$fullname = paste(champions_per_year$forename, champions_per_year$surname)
champions_per_year = champions_per_year[
champions_per_year$position == 1, ]
# take only the final race of the season
champions_per_year <- champions_per_year[ave(
champions_per_year$raceId,
champions_per_year$year,
FUN = max) == champions_per_year$raceId,
c("year", "fullname")
]
# now filter & aggregate
tmp <- merge(world_champs_races, champions_per_year,
by = c("year", "fullname"))
wins_df  <- aggregate(positionOrder ~ year + surname, tmp,
function(x) sum(x == 1))
races_df <- aggregate(raceId        ~ year + surname, tmp,
function(x) length(unique(x)))
names(wins_df)[3]  <- "wins"
names(races_df)[3] <- "races"
champ_wins_year <- merge(wins_df, races_df, by = c("year", "fullname"))
library(ggplot2)
library(ggdensity)
library(ggridges)
library(plotly)
library(tidyr)
library(htmltools)
race_results = read.csv("data/Race_Results.csv")
drivers = read.csv("data/Driver_Details.csv")
race_info = read.csv("data/Race_Schedule.csv")
world_champs = read.csv("data/world_champs.csv")
merged_race_results = merge(x = race_results, y = drivers, by = "driverId")
merged_race_results$fullname = paste(merged$forename, merged$surname)
world_champs_races = merged[(merged$surname %in% world_champs$Last) & (merged$forename %in% world_champs$First), ]
world_champs_races = merge(world_champs_races, race_info, by="raceId")
world_champs_races$win = ifelse(world_champs_races$positionOrder == 1, 1, 0)
world_champs_races$win = as.numeric(world_champs_races$win)
world_champs_wins = aggregate(world_champs_races[,"win"], world_champs_races[,c("fullname", "surname", "driverId")], "sum")
num_races = function(row) {
driver <- row[1]                    # first element is the surname
sum(!duplicated(
world_champs_races$raceId[world_champs_races$fullname == driver]))
}
world_champs_wins$num.races = apply(world_champs_wins, 1, num_races)
world_champs_wins$win.prop = world_champs_wins$x / world_champs_wins$num.races
big_data = merge(merged, race_info, by="raceId")
big_data = merge(big_data, driver_standings, by=c("driverId", "raceId"))
big_data$rank = replace_na(as.numeric(big_data$rank), 20)
big_data$win = ifelse(big_data$positionOrder == 1, 1, 0)
avg_big_data_driver = aggregate(big_data[,c("grid", "positionOrder", "win")], big_data[c("fullname", "driverId", "surname", "forename")], "mean")
driver_status = function(row) {
driver = row["fullname"]
if(driver %in% c("Max Verstappen", "Lewis Hamilton", "Sebastian Vettel", "Michael Schumacher", "Ayrton Senna", "Juan Fangio")) {
return("great")
} else if(driver %in% unique(world_champs_races$fullname)) {
return("champ")
} else {
return("driver")
}
}
avg_big_data_driver$status = apply(avg_big_data_driver, 1, driver_status)
merged_race_results$status = apply(merged_race_results, 1, driver_status)
all_time_greats = merged[(merged$fullname %in% c("Max Verstappen", "Lewis Hamilton", "Sebastian Vettel", "Michael Schumacher", "Ayrton Senna", "Juan Fangio")), ]
all_time_greats = merge(all_time_greats, race_info, by="raceId")
all_time_greats$win = ifelse(all_time_greats$positionOrder == 1, 1, 0)
driver_standings = read.csv("data/Driver_Rankings.csv")
# champions per season
champions_per_year <- merge(
merge(driver_standings, race_info[, c("raceId", "year")]),
drivers[, c("driverId", "surname", "forename")]
)
champions_per_year$fullname = paste(champions_per_year$forename, champions_per_year$surname)
champions_per_year = champions_per_year[
champions_per_year$position == 1, ]
# take only the final race of the season
champions_per_year <- champions_per_year[ave(
champions_per_year$raceId,
champions_per_year$year,
FUN = max) == champions_per_year$raceId,
c("year", "fullname")
]
# now filter & aggregate
tmp <- merge(world_champs_races, champions_per_year,
by = c("year", "fullname"))
wins_df  <- aggregate(positionOrder ~ year + fullname, tmp,
function(x) sum(x == 1))
races_df <- aggregate(raceId        ~ year + fullname, tmp,
function(x) length(unique(x)))
names(wins_df)[3]  <- "wins"
names(races_df)[3] <- "races"
champ_wins_year <- merge(wins_df, races_df, by = c("year", "fullname"))
champ_wins_year$win_rate <- with(champ_wins_year, wins / races)
champ_wins_year <- champ_wins_year[order(champ_wins_year$year), ]
champ_wins_year$status = apply(champ_wins_year, 1, driver_status)
h3("Champions have High win rates, Legends are even higher")
p("To become a F1 world champion you need to win a lot of the races in the season to secure the championship title.
champions will have high win rates but some years will be lower than others when the title is highly contested and
nobody has run away with it. However when legends win titles they do it dominately winning a vast amount of races in the season.")
plot = ggplot(champ_wins_year, aes(x = year, y = win_rate, fill = status)) +
geom_bar(stat="identity")
ggploty(plot)
h3("Champions have High win rates, Legends are even higher")
p("To become a F1 world champion you need to win a lot of the races in the season to secure the championship title.
champions will have high win rates but some years will be lower than others when the title is highly contested and
nobody has run away with it. However when legends win titles they do it dominately winning a vast amount of races in the season.")
plot = ggplot(champ_wins_year, aes(x = year, y = win_rate, fill = status)) +
geom_bar(stat="identity")
ggplotly(plot)
h3("Champions have High win rates, Legends are even higher")
p("To become a F1 world champion you need to win a lot of the races in the season to secure the championship title.
champions will have high win rates but some years will be lower than others when the title is highly contested and
nobody has run away with it. However when legends win titles they do it dominately winning a vast amount of races in the season.")
plot = ggplot(champ_wins_year, aes(x = year, y = win_rate, fill = status, color = fullname)) +
geom_bar(stat="identity")
ggplotly(plot)
h3("Champions have High win rates, Legends are even higher")
p("To become a F1 world champion you need to win a lot of the races in the season to secure the championship title.
champions will have high win rates but some years will be lower than others when the title is highly contested and
nobody has run away with it. However when legends win titles they do it dominately winning a vast amount of races in the season.")
plot = ggplot(champ_wins_year, aes(x = year, y = win_rate, fill = status)) +
geom_bar(stat="identity")
ggplotly(plot)
h3("Champions have High win rates, Legends are even higher")
p("To become a F1 world champion you need to win a lot of the races in the season to secure the championship title.
champions will have high win rates but some years will be lower than others when the title is highly contested and
nobody has run away with it. However when legends win titles they do it dominately winning a vast amount of races in the season.")
plot = ggplot(champ_wins_year, aes(x = year, y = win_rate, fill = status)) +
geom_bar(stat="identity") +
ylab("Win Percentage") +
scale_y_continuous(labels = function(x) paste0(x * 100, "%"))
ggplotly(plot)
library(ggplot2)
library(ggdensity)
library(ggridges)
library(plotly)
library(tidyr)
library(htmltools)
race_results = read.csv("data/Race_Results.csv")
drivers = read.csv("data/Driver_Details.csv")
race_info = read.csv("data/Race_Schedule.csv")
world_champs = read.csv("data/world_champs.csv")
merged_race_results = merge(x = race_results, y = drivers, by = "driverId")
merged_race_results$fullname = paste(merged$forename, merged$surname)
world_champs_races = merged[(merged$surname %in% world_champs$Last) & (merged$forename %in% world_champs$First), ]
world_champs_races = merge(world_champs_races, race_info, by="raceId")
world_champs_races$win = ifelse(world_champs_races$positionOrder == 1, 1, 0)
world_champs_races$win = as.numeric(world_champs_races$win)
world_champs_wins = aggregate(world_champs_races[,"win"], world_champs_races[,c("fullname", "surname", "driverId")], "sum")
num_races = function(row) {
driver <- row[1]                    # first element is the surname
sum(!duplicated(
world_champs_races$raceId[world_champs_races$fullname == driver]))
}
world_champs_wins$num.races = apply(world_champs_wins, 1, num_races)
world_champs_wins$win.prop = world_champs_wins$x / world_champs_wins$num.races
big_data = merge(merged, race_info, by="raceId")
big_data = merge(big_data, driver_standings, by=c("driverId", "raceId"))
big_data$rank = replace_na(as.numeric(big_data$rank), 20)
big_data$win = ifelse(big_data$positionOrder == 1, 1, 0)
avg_big_data_driver = aggregate(big_data[,c("grid", "positionOrder", "win")], big_data[c("fullname", "driverId", "surname", "forename")], "mean")
driver_status = function(row) {
driver = row["fullname"]
if(driver %in% c("Max Verstappen", "Lewis Hamilton", "Sebastian Vettel", "Michael Schumacher", "Ayrton Senna", "Juan Fangio", "Alain Prost")) {
return("great")
} else if(driver %in% unique(world_champs_races$fullname)) {
return("champ")
} else {
return("driver")
}
}
avg_big_data_driver$status = apply(avg_big_data_driver, 1, driver_status)
merged_race_results$status = apply(merged_race_results, 1, driver_status)
all_time_greats = merged[(merged$fullname %in% c("Max Verstappen", "Lewis Hamilton", "Sebastian Vettel", "Michael Schumacher", "Ayrton Senna", "Juan Fangio", "Alain Prost")), ]
all_time_greats = merge(all_time_greats, race_info, by="raceId")
all_time_greats$win = ifelse(all_time_greats$positionOrder == 1, 1, 0)
driver_standings = read.csv("data/Driver_Rankings.csv")
# champions per season
champions_per_year <- merge(
merge(driver_standings, race_info[, c("raceId", "year")]),
drivers[, c("driverId", "surname", "forename")]
)
champions_per_year$fullname = paste(champions_per_year$forename, champions_per_year$surname)
champions_per_year = champions_per_year[
champions_per_year$position == 1, ]
# take only the final race of the season
champions_per_year <- champions_per_year[ave(
champions_per_year$raceId,
champions_per_year$year,
FUN = max) == champions_per_year$raceId,
c("year", "fullname")
]
# now filter & aggregate
tmp <- merge(world_champs_races, champions_per_year,
by = c("year", "fullname"))
wins_df  <- aggregate(positionOrder ~ year + fullname, tmp,
function(x) sum(x == 1))
races_df <- aggregate(raceId        ~ year + fullname, tmp,
function(x) length(unique(x)))
names(wins_df)[3]  <- "wins"
names(races_df)[3] <- "races"
champ_wins_year <- merge(wins_df, races_df, by = c("year", "fullname"))
champ_wins_year$win_rate <- with(champ_wins_year, wins / races)
champ_wins_year <- champ_wins_year[order(champ_wins_year$year), ]
champ_wins_year$status = apply(champ_wins_year, 1, driver_status)
h3("Champions have High win rates, Legends are even higher")
p("To become a F1 world champion you need to win a lot of the races in the season to secure the championship title.
champions will have high win rates but some years will be lower than others when the title is highly contested and
nobody has run away with it. However when legends win titles they do it dominately winning a vast amount of races in the season.")
plot = ggplot(champ_wins_year, aes(x = year, y = win_rate, fill = status)) +
geom_bar(stat="identity") +
ylab("Win Percentage") +
scale_y_continuous(labels = function(x) paste0(x * 100, "%"))
ggplotly(plot)
p("As you can see in the above graph")
h2("Legends always fight back")
p("What seperates the legends from the rest of the champions is that they can always fight back when they are on
the back foot fighting through the grid to salvage a race or even challenge for the win from far back.")
plot = ggplot(merged_race_results[merged_race_results$status == "driver", ], aes(x = grid, y = positionOrder)) +
stat_density_2d(aes(fill = after_stat(level)), geom="polygon", color="white",
h=c(3,3), bins=9) +
scale_fill_distiller(palette = "BuPu") +
ggtitle("Drivers")
ggplotly(plot)
plot = ggplot(merged_race_results[merged_race_results$status == "champ", ], aes(x = grid, y = positionOrder)) +
stat_density_2d(aes(fill = after_stat(level)), geom="polygon", color="white",
h=c(3,3), bins=9) +
scale_fill_distiller(palette = "BuPu") +
ggtitle("Champs")
ggplotly(plot)
plot = ggplot(merged_race_results[merged_race_results$status == "great", ], aes(x = grid, y = positionOrder)) +
stat_density_2d(aes(fill = after_stat(level)), geom="polygon", color="white",
h=c(3,3), bins=9) +
scale_fill_distiller(palette = "BuPu") +
ggtitle("Greats")
#plot = ggplot(merged_race_results, aes(x = grid, y = positionOrder, fill = status)) +
#geom_point(alpha = 0.3)
#ggplotly(plot)
h2("Legends always fight back")
p("What seperates the legends from the rest of the champions is that they can always fight back when they are on
the back foot fighting through the grid to salvage a race or even challenge for the win from far back.")
plot = ggplot(merged_race_results[merged_race_results$status == "driver", ], aes(x = grid, y = positionOrder)) +
stat_density_2d(aes(fill = after_stat(level)), geom="polygon", color="white",
h=c(3,3), bins=9) +
scale_fill_distiller(palette = "BuPu") +
ggtitle("Drivers")
ggplotly(plot)
plot = ggplot(merged_race_results[merged_race_results$status == "champ", ], aes(x = grid, y = positionOrder)) +
stat_density_2d(aes(fill = after_stat(level)), geom="polygon", color="white",
h=c(3,3), bins=9) +
scale_fill_distiller(palette = "BuPu") +
ggtitle("Champs")
ggplotly(plot)
plot = ggplot(merged_race_results[merged_race_results$status == "great", ], aes(x = grid, y = positionOrder)) +
stat_density_2d(aes(fill = after_stat(level)), geom="polygon", color="white",
h=c(3,3), bins=9) +
scale_fill_distiller(palette = "BuPu") +
ggtitle("Greats")
ggplotly(plot)
#plot = ggplot(merged_race_results, aes(x = grid, y = positionOrder, fill = status)) +
#geom_point(alpha = 0.3)
#ggplotly(plot)
